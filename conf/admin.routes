GET         /                                controllers.admin.AdminController.index()
GET         /unfinished                      controllers.admin.AdminController.unfinished()

GET         /sandbox                         controllers.admin.SandboxController.list()
GET         /sandbox/:key                    controllers.admin.SandboxController.sandbox(key)

# GraphQL
GET         /schema                          controllers.admin.graphql.SchemaController.renderSchema()
GET         /voyager                         controllers.admin.graphql.SchemaController.voyager()

GET         /graphql                         controllers.admin.graphql.GraphQLController.graphql(query: Option[String] ?= None, dir: Option[String] ?= None, name: Option[String] ?= None, variables: Option[String] ?= None)
POST        /graphql                         controllers.admin.graphql.GraphQLController.graphqlBody
GET         /graphql/load                    controllers.admin.graphql.GraphQLQueryController.load(dir: Option[String], name)
POST        /graphql/save                    controllers.admin.graphql.GraphQLQueryController.save

GET         /wipe                            controllers.admin.AdminController.wipeSchema(key)

GET         /test                            controllers.admin.TestController.tests
GET         /test/:test                      controllers.admin.TestController.runTest(test)

GET         /rules                           controllers.admin.RulesController.rulesList(q ?= "", sortBy ?= "title")
GET         /rules/data                      controllers.admin.RulesController.rulesData
GET         /rules/:id                       controllers.admin.RulesController.rulesDetail(id: String)
GET         /rules/:id/screenshot            controllers.admin.RulesController.rulesScreenshot(id: String)

GET         /users                           controllers.admin.UserController.list(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /users/:id                       controllers.admin.UserController.detail(id: java.util.UUID)
GET         /users/:id/remove                controllers.admin.UserController.remove(id: java.util.UUID)

GET         /games                           controllers.admin.GameHistoryController.list(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /games/:id                       controllers.admin.GameHistoryController.detail(id: java.util.UUID)
GET         /games/:id/remove                controllers.admin.GameHistoryController.remove(id: java.util.UUID)

GET         /seeds                           controllers.admin.GameSeedController.list(q ?= "", sortBy ?= "first_occurred desc", page: Int ?= 0)
GET         /seeds/import                    controllers.admin.GameSeedController.importSeeds()
GET         /seeds/export                    controllers.admin.GameSeedController.exportSeeds()
GET         /seeds/:rules/:seed/remove       controllers.admin.GameSeedController.remove(rules, seed: Int)

GET         /analytics/list                  controllers.admin.AnalyticsEventController.eventList(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /analytics/sandbox               controllers.admin.AnalyticsEventController.sandbox(test: Boolean ?= false, reset: Boolean ?= false, limit: Int ?= 100, offset: Int ?= 0)
GET         /analytics/:id                   controllers.admin.AnalyticsEventController.eventDetail(id: java.util.UUID)
GET         /analytics/:id/remove            controllers.admin.AnalyticsEventController.removeEvent(id: java.util.UUID)

GET         /feedback/:key                   controllers.admin.FeedbackController.list(key, q ?= "", sortBy ?= "occurred", page: Int ?= 0)
GET         /feedback/:id/note               controllers.admin.FeedbackController.feedbackNoteForm(id: java.util.UUID)
POST        /feedback/:id/note               controllers.admin.FeedbackController.feedbackNotePost(id: java.util.UUID)
GET         /feedback/:id/remove             controllers.admin.FeedbackController.removeFeedback(id: java.util.UUID)

GET         /logs                            controllers.admin.LogController.list()
GET         /logs/:name                      controllers.admin.LogController.view(name)

GET         /report/seed                     controllers.admin.ReportController.seed()
GET         /report/trend                    controllers.admin.ReportController.trend()
GET         /report/analytics                controllers.admin.ReportController.analytics()
GET         /report/email                    controllers.admin.ReportController.email(d: org.joda.time.LocalDate ?= utils.DateUtils.today)
GET         /report/ad-hoc                   controllers.admin.AdHocQueryController.queryList(query: Option[java.util.UUID] ?= None, action: Option[String] ?= None)
POST        /report/ad-hoc/run               controllers.admin.AdHocQueryController.run()
